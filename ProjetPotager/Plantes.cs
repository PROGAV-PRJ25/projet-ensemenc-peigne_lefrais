using Potager.Models;

    public enum TerrainPref
    {
        SableuxAvecEau,
        DraineHumide,
        DraineFertile,
        BordDeMer,
        Calcaire,
        SableuxDraine
    }
public abstract class Plante
{
    public string Nom { get; set; }
    public string Nature { get; set; }
    public string SaisonSemi { get; set; }
    public TerrainPref TerrainPref { get; set; }
    public double Espacement { get; set; }
    public double PlaceNecessaire { get; set; }
    public string VitesseCroissance { get; set; }
    public double BesoinEau { get; set; }
    public double BesoinLum { get; set; }
    public double TemperaturePref { get; set; }
    public string Maladie { get; set; }
    public double EspDeVie { get; set; }
    public double FruitsRecoltes { get; set; }
    public double CroissanceActuelle { get; set; }
    public bool EstVivante { get; set; } = true;

    public Plante(string nom, string nature, string saisonSemi, TerrainPref terrainPref,
                  double espacement, double placeNecessaire, string vitesseCroissance,
                  double besoinEau, double besoinLum, double temperaturePref,
                  string maladie, double espDeVie, double fruitsRecoltes)
    {
        Nom = nom;
        Nature = nature;
        SaisonSemi = saisonSemi;
        TerrainPref = terrainPref;
        Espacement = espacement;
        PlaceNecessaire = placeNecessaire;
        VitesseCroissance = vitesseCroissance;
        BesoinEau = besoinEau;
        BesoinLum = besoinLum;
        TemperaturePref = temperaturePref;
        Maladie = maladie;
        EspDeVie = espDeVie;
        FruitsRecoltes = fruitsRecoltes;
    }

    public abstract string AffichageSymbole();
    public abstract bool PeutEtreRecoltee();

    public virtual void Croitre(double lumiere, double eau, double temperature)
    {
        if (!EstVivante)
        {
            Console.WriteLine($"{Nom} est d√©j√† morte.");
            return;
        }

        int conditionsRemplies = 0;
        if (Math.Abs(lumiere - BesoinLum) <= BesoinLum * 0.5) conditionsRemplies++;
        if (Math.Abs(eau - BesoinEau) <= BesoinEau * 0.5) conditionsRemplies++;
        if (Math.Abs(temperature - TemperaturePref) <= TemperaturePref * 0.5) conditionsRemplies++;

        if (conditionsRemplies < 2)
        {
            EstVivante = false;
            Console.WriteLine($"üíÄ {Nom} est morte √† cause de mauvaises conditions !");
        }
        else
        {
            CroissanceActuelle += conditionsRemplies;
            Console.WriteLine($"üåø {Nom} pousse bien ! Croissance actuelle : {CroissanceActuelle}");
        }
    }

    public virtual void Planter()
    {
        Console.WriteLine($"üå± {Nom} a √©t√© plant√©e !");
        CroissanceActuelle = 0;
        EstVivante = true;
    }

    public virtual void Arroser()
    {
        if (!EstVivante)
        {
            Console.WriteLine($"üíÄ {Nom} est morte et ne peut pas √™tre arros√©e...");
            return;
        }

        Console.WriteLine($"üíß {Nom} a √©t√© arros√©e !");
        CroissanceActuelle += 1;
    }

    public virtual void TraiterContreMaladie()
    {
        if (!EstVivante)
        {
            Console.WriteLine($"üíÄ {Nom} est morte et ne peut pas √™tre trait√©e...");
            return;
        }

        if (!string.IsNullOrEmpty(Maladie))
        {
            Console.WriteLine($"üß™ {Nom} a √©t√© trait√©e contre {Maladie} !");
            Maladie = ""; // gu√©rie
        }
        else
        {
            Console.WriteLine($"‚úÖ {Nom} n'est pas malade.");
        }
    }

    public virtual bool Recolter()
    {
        if (!EstVivante)
        {
            Console.WriteLine($"üíÄ {Nom} est morte. Pas de r√©colte possible.");
            return false;
        }

        if (PeutEtreRecoltee())
        {
            Console.WriteLine($"üçí {Nom} a √©t√© r√©colt√©e ! Quantit√© : {FruitsRecoltes}");
            return true;
        }
        else
        {
            Console.WriteLine($"‚è≥ {Nom} n'est pas encore pr√™te √† √™tre r√©colt√©e.");
            return false;
        }
    }

    public virtual void AfficherInfos()
    {
        Console.WriteLine($"Nom: {Nom}\nNature: {Nature}\nSaison Semis: {SaisonSemi}\nTerrain: {TerrainPref}\n" +
                          $"Espace: {Espacement}cm, Surface: {PlaceNecessaire}cm¬≤\nCroissance: {VitesseCroissance}\n" +
                          $"Besoins - Eau: {BesoinEau}, Lumi√®re: {BesoinLum}, Temp√©rature: {TemperaturePref}¬∞C\n" +
                          $"Maladie: {Maladie}\nEsp√©rance de vie: {EspDeVie} ans\nFruits/R√©colte: {FruitsRecoltes}");
    }
}


 // Classes d√©riv√©es pour chaque type de plante avec comportements sp√©cifiques dans les autres fichiers 
